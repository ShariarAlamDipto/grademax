/**
 * Test PDF Builder Module
 */

import { buildWorksheetPDF, questionsToWorksheetItems, savePDF } from './pdf_builder'
import { segmentQuestions } from './segment'
import { parsePDFFromPath } from './parse_pdf_v2'
import type { TextItem } from '../types/ingestion'
import * as path from 'path'

const QP_PATH = 'c:/Users/shari/grademax/data/raw/IGCSE/4PH1/2019/Jun/4PH1_1P.pdf'
const OUTPUT_DIR = 'c:/Users/shari/grademax/output'

async function testPDFBuilder() {
  console.log('🧪 Testing PDF Builder Module\n')
  
  // Step 1: Parse and segment question paper
  console.log('📄 Step 1: Parsing and segmenting question paper...')
  const qpResult = await parsePDFFromPath(QP_PATH)
  const textItems: TextItem[] = []
  for (const page of qpResult.pages) {
    textItems.push(...page.textItems)
  }
  const segmentResult = await segmentQuestions(textItems)
  const questions = segmentResult.questions
  console.log(`  ✓ Segmented ${questions.length} questions with ${questions.reduce((sum, q) => sum + q.parts.length, 0)} parts\n`)
  
  // Step 2: Select first 3 questions for testing
  console.log('📝 Step 2: Creating worksheet items...')
  const selectedQuestions = questions.slice(0, 3)
  const items = questionsToWorksheetItems(selectedQuestions, true)
  console.log(`  ✓ Created ${items.length} worksheet items from ${selectedQuestions.length} questions\n`)
  
  // Step 3: Build worksheet PDF
  console.log('🔨 Step 3: Building worksheet PDF...')
  const result = await buildWorksheetPDF({
    sourceQPPath: QP_PATH,
    items,
    config: {
      title: 'Test Worksheet',
      subtitle: 'Questions 1-3',
      includeAnswers: false,
      boxColor: { r: 0, g: 0.5, b: 1 }, // Blue
      boxThickness: 2,
      showLabels: true,
      headerText: 'GradeMax Test Worksheet',
      footerText: 'Generated by GradeMax'
    }
  })
  
  console.log('\n📊 Build Results:')
  console.log(`  ✓ Total pages: ${result.metadata.totalPages}`)
  console.log(`  ✓ Total marks: ${result.metadata.totalMarks}`)
  console.log(`  ✓ Estimated time: ${result.metadata.estimatedMinutes} minutes`)
  console.log(`  ✓ Vector regions: ${result.metadata.vectorRegionCount}`)
  console.log(`  ✓ PDF size: ${Math.round(result.studentPdf.length / 1024)}KB`)
  
  if (result.metadata.layoutWarnings.length > 0) {
    console.log(`  ⚠️  Warnings: ${result.metadata.layoutWarnings.length}`)
    for (const warning of result.metadata.layoutWarnings) {
      console.log(`    - ${warning}`)
    }
  }
  
  // Step 4: Save PDF
  const outputPath = path.join(OUTPUT_DIR, 'test_worksheet.pdf')
  console.log(`\n💾 Step 4: Saving PDF...`)
  savePDF(result.studentPdf, outputPath)
  
  // Validation
  console.log('\n✅ Validation:\n')
  console.log(`  ${result.metadata.totalPages > 0 ? '✓' : '✗'} PDF has pages`)
  console.log(`  ${result.metadata.vectorRegionCount === items.length ? '✓' : '✗'} All items included`)
  console.log(`  ${result.metadata.layoutWarnings.length === 0 ? '✓' : '✗'} No warnings`)
  console.log(`  ${result.studentPdf.length > 1000 ? '✓' : '✗'} PDF size > 1KB`)
  
  console.log('\n🎉 PDF Builder test complete!')
  console.log(`📄 Output: ${outputPath}`)
}

testPDFBuilder().catch(console.error)
